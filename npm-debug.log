0 info it worked if it ends with ok
1 verbose cli [ '/Users/austen/.nvm/v0.10.28/bin/node',
1 verbose cli   '/Users/austen/.nvm/v0.10.28/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@1.4.9
3 info using node@v0.10.28
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/austen/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz
12 verbose folder .
13 info prepublish json-archetypes@0.0.1
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/austen/.npm/1f1177db-tar.lock
16 silly lockFile a34b27f0-04072-0-6926828962750733-tmp-tgz tar:///var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz
17 verbose lock tar:///var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz /Users/austen/.npm/a34b27f0-04072-0-6926828962750733-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile a34b27f0-04072-0-6926828962750733-tmp-tgz tar:///var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz
21 silly lockFile a34b27f0-04072-0-6926828962750733-tmp-tgz tar:///var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz
22 verbose tar unpack /var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz
23 silly lockFile 4311ca71-pm-json-archetypes-0-0-1-package tar:///Users/austen/.npm/json-archetypes/0.0.1/package
24 verbose lock tar:///Users/austen/.npm/json-archetypes/0.0.1/package /Users/austen/.npm/4311ca71-pm-json-archetypes-0-0-1-package.lock
25 silly lockFile a34b27f0-04072-0-6926828962750733-tmp-tgz tar:///var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz
26 verbose lock tar:///var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz /Users/austen/.npm/a34b27f0-04072-0-6926828962750733-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry index.js
32 silly gunzTarPerm extractEntry utils.js
33 silly gunzTarPerm extractEntry LICENSE.md
34 silly gunzTarPerm extractEntry archetypes/real_estate_listing/temp.js
35 silly gunzTarPerm extractEntry archetypes/blog_post/temp.js
36 silly gunzTarPerm extractEntry archetypes/image/temp.js
37 silly gunzTarPerm extractEntry archetypes/image/image_archetype_schema.json
38 silly gunzTarPerm extractEntry archetypes/note/temp.js
39 silly gunzTarPerm extractEntry archetypes/product/product_archetype_validation.js
40 silly gunzTarPerm extractEntry archetypes/product/temp.js
41 silly gunzTarPerm extractEntry archetypes/product/product_archetype_schema.json
42 silly gunzTarPerm extractEntry archetypes/event/temp.js
43 silly gunzTarPerm extractEntry archetypes/receipt/temp.js
44 silly gunzTarPerm extractEntry archetypes/receipt/receipt_archetype_schema.json
45 silly gunzTarPerm extractEntry archetypes/review/temp.js
46 silly gunzTarPerm extractEntry archetypes/special_deal/temp.js
47 silly gunzTarPerm extractEntry archetypes/task/task_archetype_validation.js
48 silly gunzTarPerm extractEntry archetypes/task/temp.js
49 silly gunzTarPerm extractEntry archetypes/task/task_archetype_schema.json
50 silly gunzTarPerm extractEntry archetypes/user/temp.js
51 silly gunzTarPerm extractEntry test/test.js
52 silly gunzTarPerm extractEntry test/test_image_archetype.js
53 silly gunzTarPerm extractEntry test/test_product_archetype.js
54 silly gunzTarPerm extractEntry test/test_receipt_archetype.js
55 silly gunzTarPerm extractEntry test/test_task_archetype.js
56 silly lockFile 4311ca71-pm-json-archetypes-0-0-1-package tar:///Users/austen/.npm/json-archetypes/0.0.1/package
57 silly lockFile 4311ca71-pm-json-archetypes-0-0-1-package tar:///Users/austen/.npm/json-archetypes/0.0.1/package
58 silly lockFile a34b27f0-04072-0-6926828962750733-tmp-tgz tar:///var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz
59 silly lockFile a34b27f0-04072-0-6926828962750733-tmp-tgz tar:///var/folders/4q/hhlk6lg16x50s3n0kfb22_w00000gn/T/npm-32185-aVAq5Xy7/1408412004072-0.6926828962750733/tmp.tgz
60 silly lockFile 3a52ce78- .
61 silly lockFile 3a52ce78- .
62 silly publish { name: 'json-archetypes',
62 silly publish   author: { name: 'Austen Collins' },
62 silly publish   version: '0.0.1',
62 silly publish   description: 'Open-source JSON Models For Popular Types Of Data',
62 silly publish   main: 'index.js',
62 silly publish   repository:
62 silly publish    { type: 'git',
62 silly publish      url: 'git://github.com/servant-cmes/json-archetypes.git' },
62 silly publish   keywords:
62 silly publish    [ 'json',
62 silly publish      'schema',
62 silly publish      'model',
62 silly publish      'standards',
62 silly publish      'archetypes',
62 silly publish      'products',
62 silly publish      'images',
62 silly publish      'events',
62 silly publish      'servant' ],
62 silly publish   license: 'BSD-2-Clause',
62 silly publish   bugs: { url: 'https://github.com/servant-cmes/json-archetypes/issues' },
62 silly publish   scripts: { test: 'node ./test/test.js | tap-spec' },
62 silly publish   dependencies: {},
62 silly publish   devDependencies:
62 silly publish    { async: '0.9.0',
62 silly publish      'tap-spec': '0.2.0',
62 silly publish      tape: '2.13.3',
62 silly publish      'z-schema': '2.4.8' },
62 silly publish   readme: '#JSON Archetypes\n\n###Open-Source JSON Models For Popular Types Of Data.\n\n##Mission\n  \n**Data should be able to flow fast and freely between multiple applications...**  \nThe web is polluted with incompatible data objects.  To fix this, we need standard formats for data.  If data does not change shape, it\'s easier for developers to build applications that work with it, and it allows users to import pre-existing data into those applications, increasing distribution and productivity of their data.  \n\nJSON Archetypes aim to be the most perfect representations of popular types of data.  Each Archetype includes properties only necessary to define and differentiate it from other types of data, and purposely excludes properties needed for specific use-cases.\n\n##Goals\n#####**Allow Your Users To Import Their Pre-Existing Data Into Your App Instantly**\nIt\'s hard enough to get users.  Especially when they have to manually enter the same ol\' content (Products, Blog Posts, etc..) within your app.  Using JSON Archetypes they can import their data instantly, and get on with using what you\'ve built!  \n\n#####**Easy Validations**\nWe\'ve written validation rules right into each Archetype so you don\'t have to!\n  \n#####**Write Less Code**\nC\'mon, are you really going to model yet another *Product* or *Blog Post* data object?  Together, we can build perfect representations of those, that should serve most use-cases.\n\n#####**Don\'t Hold Users\' Data Hostage**\nIf your business plan is to hold users\' data hostage so they can\'t leave, then that is just plain awful.  Instead, build an application that creates value out of their data, and let them know that the data they create within your application will have use elsewhere too.\n\n#####**Data Liquidity**\nImagine an internet where we can instantly port our pre-existing data into new applications.  Or exit an application, knowing the data we created while using it will be usable elsewhere.\n\n##Overview\n\n***STATUS: This is currently a work in progress.  We are waiting to recieve feedback on these before launching JSON Archetypes Version 1***\n\nEach JSON Archetype uses the [JSON Schema](http://json-schema.org "http://json-schema.org") format to describe the Archetype and its validation rules.  All of the Archetypes can be found in the `archetypes` folder.  JSON Archetypes focus on are meant to be lean and contain only the essential properties/attributes that define and differentiate types of data.  The challenge is to agree on what those properties/attributes are...\n\n**This Repo contains the following:**\n\n - JSON Schemas for each JSON Archetype\n - Tests to check if the JSON Archetype Schemas are valid per the JSON SCHEMA DRAFT 4 specs\n\n*This repo is only for defining schemas  If you\'re looking for helper methods to quickly instantiate valid Data Archetypes and work with them in your applications, check out the Servant SDKs.*\n \n**Feel free to contribute to the existing JSON Archetypes or create your own!**\n\n---\n\nThis project was started to be used in SDKs for [Servant - The Content Management Ecosystem](http://servant.co), and represents half of Servant\'s strategy for building a more liquid web.  The strategy looks like this:\n\n>**• Host User Data Separate From Applications That Use It:**  This is what [Servant](http://servant.co) does.  It\'s cloud hosting for User\'s data.  \n>**• Keep User Data In Standard Formats:**  This is what JSON Archetypes are, standard formats.\n\nThe benefits of this strategy are a big deal. Check out Servant if you get a chance.  Servant also splits the hosting revenue of its users with every application that integrates with Servant.\n\n---\n##Contributing\nAnyone who has a JSON Archetype in mind, or wants to add to existing JSON Archetypes is free to contribute.  Just follow these steps:\n\n - Fork this project.\n - Clone your forked project (which should now be in your github account) to your computer.\n - Create a branch and work on it to create/modify existing JSON Archetypes \n\nMore on how to contribute [here](https://guides.github.com/activities/contributing-to-open-source/).\n\n##F.A.Q.\n###How Is This Different From Schema.org?\nSchema.org is different because their JSON schemas are intended to be used in HTML mark-up for search engines.\n\nJSON Archetype schemas do not have properties that pertain to use cases (e.g., SEO data).  Instead JSON Archetypes contain only properties commonly associated with the content, that help differentiate it from other types of data (e.g., Products have a *price*, Blog Posts have a *title*).\n\nJSON Archetypes are meant to be lean and flexible in all scenarios.  What use would SEO properties have if the data is being used in a mobile application?  Attaching properties to the Archetypes for infinite use cases would result in infinite bloat.\n\nApplications should convert JSON Archetypes to Schema.org schemas, if that application deals with HTML mark-up and SEO, leaving the JSON Archetype lean so that it can be used simultaneously in other apps.\n###As a Developer, JSON Archetypes are not robust enough for my application and I need to store more data than JSON Archetypes can hold (e.g. SEO data).  What should I do?\nThis is the most popular question and rightfully so.  You want to build a awesome application, but using JSON Archetypes feels limiting...\n\nFirst off, is the extra data you need specific to your application?  **95% of the time, developers want to add extra data/properties to the Archetypes which are only relevant to their particular applications**.  However, the JSON Archetypes must be kept lean and comprehensible for the sake of speed and ease-of-use in all scenarios.  For instance, what use would a mobile application have for SEO data if SEO data is stored in each Archetype?\n\nThere are infinite use cases for each JSON Archetype, and storing custom data for each use case would result in infinite bloat.\n\nInstead, we recommend two approaches: \n\n**Extend The Data Within Your Own Application:**  Set up a database and use it to store the extra data and the JSON Archetype ID to which it corresponds. \n\n**Propose Changes:**  If you think your extra data would suit many use-cases, propose adding it in the Issues area.\n\nIf this sounds too difficult to you, and you are leaning towards building an application that has its own custom data objects, remember that your users will have to manually enter data within your app, resulting in a barrier to entry, and redundancy that JSON Archetypes strive to get rid of.  You\'re also building another silo for your users to get stuck in.  If that\'s part of your business strategy, then fine (you evil person), but we will show people that there is better way with JSON Archetypes!  \n\nAlso, Servant will not only give you users but it literally splits its hosting revenue with applications that use JSON Archetypes.  Immediate revenue and an awesome community that you will miss out on...\n###As a User, how can I store extra data in each Archetype (e.g. obscure product details)?\nJSON Archetypes aren\'t going to be perfect for everyone.  But don\'t let the perfect be the enemy of good.  \n\nOccasionally, you may not be able to find room to squeeze in obscure details.  On the other hand, JSON Archetypes radically increase distribution and productivity of your data.  \n\n**Yes, you may miss a small detail, but more importantly, you will be able to show and use your data EVERYWHERE.**\n\n###I just found [this comic on XKCD](http://xkcd.com/927/) and it’s totally relevant bro.  If I paste it in here, will I be clever?\nYes, no one has ever done that before.  Thanks... \n\nNow, the rest of us have to get back to solving stuff.\n\n',
62 silly publish   readmeFilename: 'README.md',
62 silly publish   homepage: 'https://github.com/servant-cmes/json-archetypes',
62 silly publish   _id: 'json-archetypes@0.0.1',
62 silly publish   _shasum: 'cad2cfc14854e18fd1385186dd8f94d5227b8c37',
62 silly publish   _from: '.' }
63 verbose url raw json-archetypes
64 verbose url resolving [ 'https://registry.npmjs.org/', './json-archetypes' ]
65 verbose url resolved https://registry.npmjs.org/json-archetypes
66 info trying registry request attempt 1 at 18:33:24
67 http PUT https://registry.npmjs.org/json-archetypes
68 http 403 https://registry.npmjs.org/json-archetypes
69 verbose headers { date: 'Tue, 19 Aug 2014 01:33:25 GMT',
69 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
69 verbose headers   'content-type': 'application/json',
69 verbose headers   'cache-control': 'max-age=60',
69 verbose headers   'content-length': '10739',
69 verbose headers   'accept-ranges': 'bytes',
69 verbose headers   via: '1.1 varnish',
69 verbose headers   'x-served-by': 'cache-sjc3124-SJC',
69 verbose headers   'x-cache': 'MISS',
69 verbose headers   'x-cache-hits': '0',
69 verbose headers   'x-timer': 'S1408412005.509771,VS0,VE227',
69 verbose headers   'keep-alive': 'timeout=10, max=50',
69 verbose headers   connection: 'Keep-Alive' }
70 error publish Failed PUT 403
71 error Error: forbidden cannot modify pre-existing version: 0.0.1
71 error old={"name":"json-archetypes","author":{"name":"Austen Collins"},"version":"0.0.1","description":"Open-source JSON Models For Popular Types Of Data","main":"index.js","repository":{"type":"git","url":"git://github.com/servant-cmes/json-archetypes.git"},"keywords":["json","schema","model","standards","archetypes","products","images","events","servant"],"license":"BSD-2-Clause","bugs":{"url":"https://github.com/servant-cmes/json-archetypes/issues"},"scripts":{"test":"node ./test/test.js | tap-spec"},"dependencies":{},"devDependencies":{"async":"0.9.0","tap-spec":"0.2.0","tape":"2.13.3","z-schema":"2.4.8"},"homepage":"https://github.com/servant-cmes/json-archetypes","_id":"json-archetypes@0.0.1","_shasum":"cad2cfc14854e18fd1385186dd8f94d5227b8c37","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"ac360","email":"austen@servant.co"},"maintainers":[{"name":"ac360","email":"austen@servant.co"}],"dist":{"shasum":"cad2cfc14854e18fd1385186dd8f94d5227b8c37","tarball":"http://registry.npmjs.org/json-archetypes/-/json-archetypes-0.0.1.tgz"}}
71 error new={"name":"json-archetypes","author":{"name":"Austen Collins"},"version":"0.0.1","description":"Open-source JSON Models For Popular Types Of Data","main":"index.js","repository":{"type":"git","url":"git://github.com/servant-cmes/json-archetypes.git"},"keywords":["json","schema","model","standards","archetypes","products","images","events","servant"],"license":"BSD-2-Clause","bugs":{"url":"https://github.com/servant-cmes/json-archetypes/issues"},"scripts":{"test":"node ./test/test.js | tap-spec"},"dependencies":{},"devDependencies":{"async":"0.9.0","tap-spec":"0.2.0","tape":"2.13.3","z-schema":"2.4.8"},"readme":"#JSON Archetypes\u000a\u000a###Open-Source JSON Models For Popular Types Of Data.\u000a\u000a##Mission\u000a  \u000a**Data should be able to flow fast and freely between multiple applications...**  \u000aThe web is polluted with incompatible data objects.  To fix this, we need standard formats for data.  If data does not change shape, it's easier for developers to build applications that work with it, and it allows users to import pre-existing data into those applications, increasing distribution and productivity of their data.  \u000a\u000aJSON Archetypes aim to be the most perfect representations of popular types of data.  Each Archetype includes properties only necessary to define and differentiate it from other types of data, and purposely excludes properties needed for specific use-cases.\u000a\u000a##Goals\u000a#####**Allow Your Users To Import Their Pre-Existing Data Into Your App Instantly**\u000aIt's hard enough to get users.  Especially when they have to manually enter the same ol' content (Products, Blog Posts, etc..) within your app.  Using JSON Archetypes they can import their data instantly, and get on with using what you've built!  \u000a\u000a#####**Easy Validations**\u000aWe've written validation rules right into each Archetype so you don't have to!\u000a  \u000a#####**Write Less Code**\u000aC'mon, are you really going to model yet another *Product* or *Blog Post* data object?  Together, we can build perfect representations of those, that should serve most use-cases.\u000a\u000a#####**Don't Hold Users' Data Hostage**\u000aIf your business plan is to hold users' data hostage so they can't leave, then that is just plain awful.  Instead, build an application that creates value out of their data, and let them know that the data they create within your application will have use elsewhere too.\u000a\u000a#####**Data Liquidity**\u000aImagine an internet where we can instantly port our pre-existing data into new applications.  Or exit an application, knowing the data we created while using it will be usable elsewhere.\u000a\u000a##Overview\u000a\u000a***STATUS: This is currently a work in progress.  We are waiting to recieve feedback on these before launching JSON Archetypes Version 1***\u000a\u000aEach JSON Archetype uses the [JSON Schema](http://json-schema.org \"http://json-schema.org\") format to describe the Archetype and its validation rules.  All of the Archetypes can be found in the `archetypes` folder.  JSON Archetypes focus on are meant to be lean and contain only the essential properties/attributes that define and differentiate types of data.  The challenge is to agree on what those properties/attributes are...\u000a\u000a**This Repo contains the following:**\u000a\u000a - JSON Schemas for each JSON Archetype\u000a - Tests to check if the JSON Archetype Schemas are valid per the JSON SCHEMA DRAFT 4 specs\u000a\u000a*This repo is only for defining schemas  If you're looking for helper methods to quickly instantiate valid Data Archetypes and work with them in your applications, check out the Servant SDKs.*\u000a \u000a**Feel free to contribute to the existing JSON Archetypes or create your own!**\u000a\u000a---\u000a\u000aThis project was started to be used in SDKs for [Servant - The Content Management Ecosystem](http://servant.co), and represents half of Servant's strategy for building a more liquid web.  The strategy looks like this:\u000a\u000a>**• Host User Data Separate From Applications That Use It:**  This is what [Servant](http://servant.co) does.  It's cloud hosting for User's data.  \u000a>**• Keep User Data In Standard Formats:**  This is what JSON Archetypes are, standard formats.\u000a\u000aThe benefits of this strategy are a big deal. Check out Servant if you get a chance.  Servant also splits the hosting revenue of its users with every application that integrates with Servant.\u000a\u000a---\u000a##Contributing\u000aAnyone who has a JSON Archetype in mind, or wants to add to existing JSON Archetypes is free to contribute.  Just follow these steps:\u000a\u000a - Fork this project.\u000a - Clone your forked project (which should now be in your github account) to your computer.\u000a - Create a branch and work on it to create/modify existing JSON Archetypes \u000a\u000aMore on how to contribute [here](https://guides.github.com/activities/contributing-to-open-source/).\u000a\u000a##F.A.Q.\u000a###How Is This Different From Schema.org?\u000aSchema.org is different because their JSON schemas are intended to be used in HTML mark-up for search engines.\u000a\u000aJSON Archetype schemas do not have properties that pertain to use cases (e.g., SEO data).  Instead JSON Archetypes contain only properties commonly associated with the content, that help differentiate it from other types of data (e.g., Products have a *price*, Blog Posts have a *title*).\u000a\u000aJSON Archetypes are meant to be lean and flexible in all scenarios.  What use would SEO properties have if the data is being used in a mobile application?  Attaching properties to the Archetypes for infinite use cases would result in infinite bloat.\u000a\u000aApplications should convert JSON Archetypes to Schema.org schemas, if that application deals with HTML mark-up and SEO, leaving the JSON Archetype lean so that it can be used simultaneously in other apps.\u000a###As a Developer, JSON Archetypes are not robust enough for my application and I need to store more data than JSON Archetypes can hold (e.g. SEO data).  What should I do?\u000aThis is the most popular question and rightfully so.  You want to build a awesome application, but using JSON Archetypes feels limiting...\u000a\u000aFirst off, is the extra data you need specific to your application?  **95% of the time, developers want to add extra data/properties to the Archetypes which are only relevant to their particular applications**.  However, the JSON Archetypes must be kept lean and comprehensible for the sake of speed and ease-of-use in all scenarios.  For instance, what use would a mobile application have for SEO data if SEO data is stored in each Archetype?\u000a\u000aThere are infinite use cases for each JSON Archetype, and storing custom data for each use case would result in infinite bloat.\u000a\u000aInstead, we recommend two approaches: \u000a\u000a**Extend The Data Within Your Own Application:**  Set up a database and use it to store the extra data and the JSON Archetype ID to which it corresponds. \u000a\u000a**Propose Changes:**  If you think your extra data would suit many use-cases, propose adding it in the Issues area.\u000a\u000aIf this sounds too difficult to you, and you are leaning towards building an application that has its own custom data objects, remember that your users will have to manually enter data within your app, resulting in a barrier to entry, and redundancy that JSON Archetypes strive to get rid of.  You're also building another silo for your users to get stuck in.  If that's part of your business strategy, then fine (you evil person), but we will show people that there is better way with JSON Archetypes!  \u000a\u000aAlso, Servant will not only give you users but it literally splits its hosting revenue with applications that use JSON Archetypes.  Immediate revenue and an awesome community that you will miss out on...\u000a###As a User, how can I store extra data in each Archetype (e.g. obscure product details)?\u000aJSON Archetypes aren't going to be perfect for everyone.  But don't let the perfect be the enemy of good.  \u000a\u000aOccasionally, you may not be able to find room to squeeze in obscure details.  On the other hand, JSON Archetypes radically increase distribution and productivity of your data.  \u000a\u000a**Yes, you may miss a small detail, but more importantly, you will be able to show and use your data EVERYWHERE.**\u000a\u000a###I just found [this comic on XKCD](http://xkcd.com/927/) and it’s totally relevant bro.  If I paste it in here, will I be clever?\u000aYes, no one has ever done that before.  Thanks... \u000a\u000aNow, the rest of us have to get back to solving stuff.\u000a\u000a","readmeFilename":"README.md","homepage":"https://github.com/servant-cmes/json-archetypes","_id":"json-archetypes@0.0.1","_shasum":"cad2cfc14854e18fd1385186dd8f94d5227b8c37","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"ac360","email":"austen@servant.co"},"maintainers":[{"name":"ac360","email":"austen@servant.co"}],"dist":{"shasum":"cad2cfc14854e18fd1385186dd8f94d5227b8c37","tarball":"http://registry.npmjs.org/json-archetypes/-/json-archetypes-0.0.1.tgz"}}: json-archetypes
71 error     at RegClient.<anonymous> (/Users/austen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:273:14)
71 error     at Request._callback (/Users/austen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:211:65)
71 error     at Request.self.callback (/Users/austen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/request/request.js:123:22)
71 error     at Request.EventEmitter.emit (events.js:98:17)
71 error     at Request.<anonymous> (/Users/austen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/request/request.js:893:14)
71 error     at Request.EventEmitter.emit (events.js:117:20)
71 error     at IncomingMessage.<anonymous> (/Users/austen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/request/request.js:844:12)
71 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
71 error     at _stream_readable.js:919:16
71 error     at process._tickCallback (node.js:419:13)
72 error If you need help, you may report this *entire* log,
72 error including the npm and node versions, at:
72 error     <http://github.com/npm/npm/issues>
73 error System Darwin 13.3.0
74 error command "/Users/austen/.nvm/v0.10.28/bin/node" "/Users/austen/.nvm/v0.10.28/bin/npm" "publish"
75 error cwd /Users/austen/Desktop/node/json-archetypes
76 error node -v v0.10.28
77 error npm -v 1.4.9
78 verbose exit [ 1, true ]
